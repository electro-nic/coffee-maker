substitutions:
  device_name: coffee-maker
  coffee_max: '300001'
  
esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp12e

# Enable logging
logger:

# Enable Home Assistant API

ota:
  password: !secret ota_password_coffee_maker

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password


  ap:
    ssid: "Coffee-Maker Fallback Hotspot"
    password: !secret fallback_password_coffee_maker
  reboot_timeout: 0s
captive_portal:

web_server:
  port: 80
# Relay outputs, exposed as switches in Home Assistant

globals:
  - id: water_count_var
    type: float
    restore_value: no
    initial_value: '100000.0'
    
switch:
  - platform: gpio
    pin: GPIO13
    name: "On"
    id: cmonoff
  - platform: gpio
    pin: GPIO14
    name: "Large Coffee"
    id: cmlarge
  - platform: gpio
    pin: GPIO12
    name: "Water"
    id: cmwater
  - platform: template
    name: "POWER"
    turn_on_action:
      - switch.turn_on: cmonoff
      - delay: 200ms
      - switch.turn_off: cmonoff
      

    
    
api:
  password: !secret api_password_coffee_maker

sensor:
  - platform: wifi_signal # Уровень Wi-Fi сигнала положительным числом
    name: "status_${device_name}"
    update_interval: 60s 
    filters:
      - lambda: return x * (-1);
  - platform: uptime # Время работы после последней перезагрузки
    name: "uptime_${device_name}"
    
  - platform: pulse_counter
    pin: GPIO03
    id: my_flow_meter
#    name: "Water_Counter${device_name}" # лучше убрать, чтобы не гадил часто в эфир и потом какое дело до него HA
    update_interval: 3s # можно и меньше если уберёшь name:
    accuracy_decimals: 6
    filters:
      - lambda: return x/20; # для интервала 3 сек
    on_value:
      lambda: |-
                if(x){ // x не равно нулю, - значит счетчик считает
                id(water_count_var) += x;
                ESP_LOGI("integration", "integration value = %f", id(water_count_var));
                if(id(water_count_var) >= ${coffee_max})
                      id(led_red_on_soft).execute();

                  }
  #                     id(push_large_coffee).execute();   
  # - platform: integration
  #   id: water_count_var
  #   name: "Total Cofee Water"
  #   sensor: my_flow_meter
  #   time_unit: min
  #   accuracy_decimals: 1
    
    
  - platform: ntc
    sensor: resistance_sensor_boiler
    calibration:
      b_constant: 4485
      reference_temperature: 25°C
      reference_resistance: 68kOhm
    name: NTC Temperature Sensor

  # Coffee boiler temperature sensors:
  - platform: resistance
    id: resistance_sensor_boiler
    sensor: ntc_sensor
    configuration: DOWNSTREAM
    resistor: 221kOhm
    name: Resistance Sensor
  - platform: adc
    id: ntc_sensor
    pin: A0
    
binary_sensor:
  - platform: status
    name: "state_${device_name}"
    
#### Water detection ####
  - platform: gpio
    name: "Water Level"
    id: lewel_water
    pin:
      number: GPIO01
      mode: INPUT_PULLUP
      #inverted: True
    filters:
      delayed_off: 2000ms
    on_press:
      then:
        - script.execute: state_no_water
        - logger.log: "water , gerkon open  "  
        
##### Button Maker Coffee #####
  - platform: gpio
    name: "Button Coffee"
    id: start_coffee
    pin:
      number: GPIO00
      mode: INPUT_PULLUP
#      inverted: True
    filters:
      delayed_on: 2000ms
    on_press:
      lambda: |-
              if( id(lewel_water).state == true){
                  
                  id(water_count_var) = 0.0;
                id(push_8sec_large_coffee).execute();
              }
      # - script.execute: make_big_coffee
      
script:
  - id: state_no_water
    then:
      - script.execute: led_red_on_soft
      - logger.log: "Fill Water"
  
  # Enter to programming
  - id: push_8sec_large_coffee
    then:
        - logger.log: "Accept Enter to programming"
        - switch.turn_on: cmlarge
        - delay: 8s
        - switch.turn_off: cmlarge

        
  - id: push_large_coffee
    then:
        - logger.log: "Click 1sec Large Coffee"
        - switch.turn_on: cmlarge
        - delay: 1s
        - switch.turn_off: cmlarge
        - delay: 10ms
        # - sensor.integration.reset:  water_count_var
        
  - id: make_big_coffee
    then:
      # - sensor.integration.reset:  water_count_var
      - if:
           condition:
            binary_sensor.is_off: lewel_water
           then:
              - script.execute: push_8sec_large_coffee
#               # - if:
#               #       condition:
#               #               sensor.in_range: 
#               #               id: water_count_var
#               #               above: 10.0
#               #       then:
#               #               script.execute: push_large_coffee
                    
#               - while:
#                   condition:


#                   then:
#                       script.execute: push_large_coffee
           else:
                - logger.log: "Error, no water in the tank, will not star the coffee machine"  
  - id: led_red_on_soft
    then:
      light.turn_on:
        id: red_led
        brightness: 100%
        transition_length: 100ms
    
light:
  - platform: monochromatic
    id: red_led
    name: "Red led"
    restore_mode: ALWAYS_OFF
    output: led_red
    
output:
  # Red LED
  - platform: esp8266_pwm
    id: led_red
    frequency: 1000 Hz
    pin: GPIO15
#      number: GPIO15
#      mode: OUTPUT
      
time:
  - platform: sntp
    on_time:
      # Every 2 sec
      - seconds: /2
        minutes: 0
        then:
          - if:
              condition:
                binary_sensor.is_off: lewel_water
              then:
               - script.stop: make_big_coffee
               - logger.log: "Error, stop make coffee "  
               